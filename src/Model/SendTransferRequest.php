<?php
/**
 * SendTransferRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Kstmostofa\DingConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ding API
 *
 * Important note: If you are within DingConnect, your API key is displayed above and can be used to access and send top-up from your system via the Ding API.    The Ding API is a Level 0 REST web service.  We have used the <a href=\"http://swagger.io\">swagger</a> standard to describe this service. As a result, we are able to provide this interactive documentation page. For further information, you may view the <a href=\"/api/description\">additional documentation</a>; read our <a href=\"/api/faq\">FAQ</a> or contact partnersupport@ding.com
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kstmostofa\DingConnect\Model;

use \ArrayAccess;
use \Kstmostofa\DingConnect\ObjectSerializer;

/**
 * SendTransferRequest Class Doc Comment
 *
 * @category Class
 * @package  Kstmostofa\DingConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SendTransferRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SendTransferRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sku_code' => 'string',
        'send_value' => 'double',
        'send_currency_iso' => 'string',
        'account_number' => 'string',
        'distributor_ref' => 'string',
        'settings' => '\Kstmostofa\DingConnect\Model\Setting[]',
        'validate_only' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sku_code' => null,
        'send_value' => 'double',
        'send_currency_iso' => null,
        'account_number' => null,
        'distributor_ref' => null,
        'settings' => null,
        'validate_only' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sku_code' => 'SkuCode',
        'send_value' => 'SendValue',
        'send_currency_iso' => 'SendCurrencyIso',
        'account_number' => 'AccountNumber',
        'distributor_ref' => 'DistributorRef',
        'settings' => 'Settings',
        'validate_only' => 'ValidateOnly'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sku_code' => 'setSkuCode',
        'send_value' => 'setSendValue',
        'send_currency_iso' => 'setSendCurrencyIso',
        'account_number' => 'setAccountNumber',
        'distributor_ref' => 'setDistributorRef',
        'settings' => 'setSettings',
        'validate_only' => 'setValidateOnly'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sku_code' => 'getSkuCode',
        'send_value' => 'getSendValue',
        'send_currency_iso' => 'getSendCurrencyIso',
        'account_number' => 'getAccountNumber',
        'distributor_ref' => 'getDistributorRef',
        'settings' => 'getSettings',
        'validate_only' => 'getValidateOnly'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sku_code'] = isset($data['sku_code']) ? $data['sku_code'] : null;
        $this->container['send_value'] = isset($data['send_value']) ? $data['send_value'] : null;
        $this->container['send_currency_iso'] = isset($data['send_currency_iso']) ? $data['send_currency_iso'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
        $this->container['distributor_ref'] = isset($data['distributor_ref']) ? $data['distributor_ref'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['validate_only'] = isset($data['validate_only']) ? $data['validate_only'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku_code'] === null) {
            $invalidProperties[] = "'sku_code' can't be null";
        }
        if ($this->container['send_value'] === null) {
            $invalidProperties[] = "'send_value' can't be null";
        }
        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        if ($this->container['distributor_ref'] === null) {
            $invalidProperties[] = "'distributor_ref' can't be null";
        }
        if ($this->container['validate_only'] === null) {
            $invalidProperties[] = "'validate_only' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sku_code
     *
     * @return string
     */
    public function getSkuCode()
    {
        return $this->container['sku_code'];
    }

    /**
     * Sets sku_code
     *
     * @param string $sku_code Code provided by GetProducts API
     *
     * @return $this
     */
    public function setSkuCode($sku_code)
    {
        $this->container['sku_code'] = $sku_code;

        return $this;
    }

    /**
     * Gets send_value
     *
     * @return double
     */
    public function getSendValue()
    {
        return $this->container['send_value'];
    }

    /**
     * Sets send_value
     *
     * @param double $send_value The transfer value to be sent. Specified to two decimal places of accuracy of the major currency unit, e.g. 3.17 USD.
     *
     * @return $this
     */
    public function setSendValue($send_value)
    {
        $this->container['send_value'] = $send_value;

        return $this;
    }

    /**
     * Gets send_currency_iso
     *
     * @return string
     */
    public function getSendCurrencyIso()
    {
        return $this->container['send_currency_iso'];
    }

    /**
     * Sets send_currency_iso
     *
     * @param string $send_currency_iso The currency of the `SendValue`. If this is null or empty, we will assume distributor currency.
     *
     * @return $this
     */
    public function setSendCurrencyIso($send_currency_iso)
    {
        $this->container['send_currency_iso'] = $send_currency_iso;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The account number to target
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }

    /**
     * Gets distributor_ref
     *
     * @return string
     */
    public function getDistributorRef()
    {
        return $this->container['distributor_ref'];
    }

    /**
     * Sets distributor_ref
     *
     * @param string $distributor_ref Unique identifier in the distributor system to be associated with the transfer
     *
     * @return $this
     */
    public function setDistributorRef($distributor_ref)
    {
        $this->container['distributor_ref'] = $distributor_ref;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Kstmostofa\DingConnect\Model\Setting[]
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Kstmostofa\DingConnect\Model\Setting[] $settings Product specific name/value pairs to be associated with the transfer request
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets validate_only
     *
     * @return bool
     */
    public function getValidateOnly()
    {
        return $this->container['validate_only'];
    }

    /**
     * Sets validate_only
     *
     * @param bool $validate_only Validate the request with the provider without doing a transfer
     *
     * @return $this
     */
    public function setValidateOnly($validate_only)
    {
        $this->container['validate_only'] = $validate_only;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


