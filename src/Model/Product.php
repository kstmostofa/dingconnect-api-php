<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  Kstmostofa\DingConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ding API
 *
 * Important note: If you are within DingConnect, your API key is displayed above and can be used to access and send top-up from your system via the Ding API.    The Ding API is a Level 0 REST web service.  We have used the <a href=\"http://swagger.io\">swagger</a> standard to describe this service. As a result, we are able to provide this interactive documentation page. For further information, you may view the <a href=\"/api/description\">additional documentation</a>; read our <a href=\"/api/faq\">FAQ</a> or contact partnersupport@ding.com
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kstmostofa\DingConnect\Model;

use \ArrayAccess;
use \Kstmostofa\DingConnect\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  Kstmostofa\DingConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'provider_code' => 'string',
        'sku_code' => 'string',
        'localization_key' => 'string',
        'setting_definitions' => '\Kstmostofa\DingConnect\Model\SettingDefinition[]',
        'maximum' => '\Kstmostofa\DingConnect\Model\Price',
        'minimum' => '\Kstmostofa\DingConnect\Model\Price',
        'commission_rate' => 'float',
        'processing_mode' => 'string',
        'redemption_mechanism' => 'string',
        'benefits' => 'string[]',
        'validity_period_iso' => 'string',
        'uat_number' => 'string',
        'additional_information' => 'string',
        'default_display_text' => 'string',
        'region_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'provider_code' => null,
        'sku_code' => null,
        'localization_key' => null,
        'setting_definitions' => null,
        'maximum' => null,
        'minimum' => null,
        'commission_rate' => 'decimal',
        'processing_mode' => null,
        'redemption_mechanism' => null,
        'benefits' => null,
        'validity_period_iso' => null,
        'uat_number' => null,
        'additional_information' => null,
        'default_display_text' => null,
        'region_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'provider_code' => 'ProviderCode',
        'sku_code' => 'SkuCode',
        'localization_key' => 'LocalizationKey',
        'setting_definitions' => 'SettingDefinitions',
        'maximum' => 'Maximum',
        'minimum' => 'Minimum',
        'commission_rate' => 'CommissionRate',
        'processing_mode' => 'ProcessingMode',
        'redemption_mechanism' => 'RedemptionMechanism',
        'benefits' => 'Benefits',
        'validity_period_iso' => 'ValidityPeriodIso',
        'uat_number' => 'UatNumber',
        'additional_information' => 'AdditionalInformation',
        'default_display_text' => 'DefaultDisplayText',
        'region_code' => 'RegionCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'provider_code' => 'setProviderCode',
        'sku_code' => 'setSkuCode',
        'localization_key' => 'setLocalizationKey',
        'setting_definitions' => 'setSettingDefinitions',
        'maximum' => 'setMaximum',
        'minimum' => 'setMinimum',
        'commission_rate' => 'setCommissionRate',
        'processing_mode' => 'setProcessingMode',
        'redemption_mechanism' => 'setRedemptionMechanism',
        'benefits' => 'setBenefits',
        'validity_period_iso' => 'setValidityPeriodIso',
        'uat_number' => 'setUatNumber',
        'additional_information' => 'setAdditionalInformation',
        'default_display_text' => 'setDefaultDisplayText',
        'region_code' => 'setRegionCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'provider_code' => 'getProviderCode',
        'sku_code' => 'getSkuCode',
        'localization_key' => 'getLocalizationKey',
        'setting_definitions' => 'getSettingDefinitions',
        'maximum' => 'getMaximum',
        'minimum' => 'getMinimum',
        'commission_rate' => 'getCommissionRate',
        'processing_mode' => 'getProcessingMode',
        'redemption_mechanism' => 'getRedemptionMechanism',
        'benefits' => 'getBenefits',
        'validity_period_iso' => 'getValidityPeriodIso',
        'uat_number' => 'getUatNumber',
        'additional_information' => 'getAdditionalInformation',
        'default_display_text' => 'getDefaultDisplayText',
        'region_code' => 'getRegionCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['provider_code'] = isset($data['provider_code']) ? $data['provider_code'] : null;
        $this->container['sku_code'] = isset($data['sku_code']) ? $data['sku_code'] : null;
        $this->container['localization_key'] = isset($data['localization_key']) ? $data['localization_key'] : null;
        $this->container['setting_definitions'] = isset($data['setting_definitions']) ? $data['setting_definitions'] : null;
        $this->container['maximum'] = isset($data['maximum']) ? $data['maximum'] : null;
        $this->container['minimum'] = isset($data['minimum']) ? $data['minimum'] : null;
        $this->container['commission_rate'] = isset($data['commission_rate']) ? $data['commission_rate'] : null;
        $this->container['processing_mode'] = isset($data['processing_mode']) ? $data['processing_mode'] : null;
        $this->container['redemption_mechanism'] = isset($data['redemption_mechanism']) ? $data['redemption_mechanism'] : null;
        $this->container['benefits'] = isset($data['benefits']) ? $data['benefits'] : null;
        $this->container['validity_period_iso'] = isset($data['validity_period_iso']) ? $data['validity_period_iso'] : null;
        $this->container['uat_number'] = isset($data['uat_number']) ? $data['uat_number'] : null;
        $this->container['additional_information'] = isset($data['additional_information']) ? $data['additional_information'] : null;
        $this->container['default_display_text'] = isset($data['default_display_text']) ? $data['default_display_text'] : null;
        $this->container['region_code'] = isset($data['region_code']) ? $data['region_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['provider_code'] === null) {
            $invalidProperties[] = "'provider_code' can't be null";
        }
        if ($this->container['sku_code'] === null) {
            $invalidProperties[] = "'sku_code' can't be null";
        }
        if ($this->container['localization_key'] === null) {
            $invalidProperties[] = "'localization_key' can't be null";
        }
        if ($this->container['setting_definitions'] === null) {
            $invalidProperties[] = "'setting_definitions' can't be null";
        }
        if ($this->container['maximum'] === null) {
            $invalidProperties[] = "'maximum' can't be null";
        }
        if ($this->container['minimum'] === null) {
            $invalidProperties[] = "'minimum' can't be null";
        }
        if ($this->container['commission_rate'] === null) {
            $invalidProperties[] = "'commission_rate' can't be null";
        }
        if ($this->container['processing_mode'] === null) {
            $invalidProperties[] = "'processing_mode' can't be null";
        }
        if ($this->container['redemption_mechanism'] === null) {
            $invalidProperties[] = "'redemption_mechanism' can't be null";
        }
        if ($this->container['benefits'] === null) {
            $invalidProperties[] = "'benefits' can't be null";
        }
        if ($this->container['uat_number'] === null) {
            $invalidProperties[] = "'uat_number' can't be null";
        }
        if ($this->container['default_display_text'] === null) {
            $invalidProperties[] = "'default_display_text' can't be null";
        }
        if ($this->container['region_code'] === null) {
            $invalidProperties[] = "'region_code' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets provider_code
     *
     * @return string
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     *
     * @param string $provider_code The provider of the product
     *
     * @return $this
     */
    public function setProviderCode($provider_code)
    {
        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets sku_code
     *
     * @return string
     */
    public function getSkuCode()
    {
        return $this->container['sku_code'];
    }

    /**
     * Sets sku_code
     *
     * @param string $sku_code Unique code to be used in conjunction with `SendTransfer` (SKU: \"Stock Keeping Unit\").
     *
     * @return $this
     */
    public function setSkuCode($sku_code)
    {
        $this->container['sku_code'] = $sku_code;

        return $this;
    }

    /**
     * Gets localization_key
     *
     * @return string
     */
    public function getLocalizationKey()
    {
        return $this->container['localization_key'];
    }

    /**
     * Sets localization_key
     *
     * @param string $localization_key Key to be used in conjunction with `GetProductDescriptions`
     *
     * @return $this
     */
    public function setLocalizationKey($localization_key)
    {
        $this->container['localization_key'] = $localization_key;

        return $this;
    }

    /**
     * Gets setting_definitions
     *
     * @return \Kstmostofa\DingConnect\Model\SettingDefinition[]
     */
    public function getSettingDefinitions()
    {
        return $this->container['setting_definitions'];
    }

    /**
     * Sets setting_definitions
     *
     * @param \Kstmostofa\DingConnect\Model\SettingDefinition[] $setting_definitions Name/Value pairs that should be submitted during `SendTransfer`
     *
     * @return $this
     */
    public function setSettingDefinitions($setting_definitions)
    {
        $this->container['setting_definitions'] = $setting_definitions;

        return $this;
    }

    /**
     * Gets maximum
     *
     * @return \Kstmostofa\DingConnect\Model\Price
     */
    public function getMaximum()
    {
        return $this->container['maximum'];
    }

    /**
     * Sets maximum
     *
     * @param \Kstmostofa\DingConnect\Model\Price $maximum The Maximum price that can be sold
     *
     * @return $this
     */
    public function setMaximum($maximum)
    {
        $this->container['maximum'] = $maximum;

        return $this;
    }

    /**
     * Gets minimum
     *
     * @return \Kstmostofa\DingConnect\Model\Price
     */
    public function getMinimum()
    {
        return $this->container['minimum'];
    }

    /**
     * Sets minimum
     *
     * @param \Kstmostofa\DingConnect\Model\Price $minimum The Minimum price that can be sold
     *
     * @return $this
     */
    public function setMinimum($minimum)
    {
        $this->container['minimum'] = $minimum;

        return $this;
    }

    /**
     * Gets commission_rate
     *
     * @return float
     */
    public function getCommissionRate()
    {
        return $this->container['commission_rate'];
    }

    /**
     * Sets commission_rate
     *
     * @param float $commission_rate The rate of commission that will be applied for selling this product
     *
     * @return $this
     */
    public function setCommissionRate($commission_rate)
    {
        $this->container['commission_rate'] = $commission_rate;

        return $this;
    }

    /**
     * Gets processing_mode
     *
     * @return string
     */
    public function getProcessingMode()
    {
        return $this->container['processing_mode'];
    }

    /**
     * Sets processing_mode
     *
     * @param string $processing_mode Transaction processing mode for this product
     *
     * @return $this
     */
    public function setProcessingMode($processing_mode)
    {
        $this->container['processing_mode'] = $processing_mode;

        return $this;
    }

    /**
     * Gets redemption_mechanism
     *
     * @return string
     */
    public function getRedemptionMechanism()
    {
        return $this->container['redemption_mechanism'];
    }

    /**
     * Sets redemption_mechanism
     *
     * @param string $redemption_mechanism Indicates if the customer is required to take further action in order to redeem the transfer
     *
     * @return $this
     */
    public function setRedemptionMechanism($redemption_mechanism)
    {
        $this->container['redemption_mechanism'] = $redemption_mechanism;

        return $this;
    }

    /**
     * Gets benefits
     *
     * @return string[]
     */
    public function getBenefits()
    {
        return $this->container['benefits'];
    }

    /**
     * Sets benefits
     *
     * @param string[] $benefits What type of benefits will the transfer give to the target account
     *
     * @return $this
     */
    public function setBenefits($benefits)
    {
        $this->container['benefits'] = $benefits;

        return $this;
    }

    /**
     * Gets validity_period_iso
     *
     * @return string
     */
    public function getValidityPeriodIso()
    {
        return $this->container['validity_period_iso'];
    }

    /**
     * Sets validity_period_iso
     *
     * @param string $validity_period_iso How long is the product valid for after purchase
     *
     * @return $this
     */
    public function setValidityPeriodIso($validity_period_iso)
    {
        $this->container['validity_period_iso'] = $validity_period_iso;

        return $this;
    }

    /**
     * Gets uat_number
     *
     * @return string
     */
    public function getUatNumber()
    {
        return $this->container['uat_number'];
    }

    /**
     * Sets uat_number
     *
     * @param string $uat_number User Acceptance Test Number
     *
     * @return $this
     */
    public function setUatNumber($uat_number)
    {
        $this->container['uat_number'] = $uat_number;

        return $this;
    }

    /**
     * Gets additional_information
     *
     * @return string
     */
    public function getAdditionalInformation()
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param string $additional_information Any distributor specific information/caveats about this particular product
     *
     * @return $this
     */
    public function setAdditionalInformation($additional_information)
    {
        $this->container['additional_information'] = $additional_information;

        return $this;
    }

    /**
     * Gets default_display_text
     *
     * @return string
     */
    public function getDefaultDisplayText()
    {
        return $this->container['default_display_text'];
    }

    /**
     * Sets default_display_text
     *
     * @param string $default_display_text The Display text from the `LocalizedProductDescription` in the default language (usually \"en\").
     *
     * @return $this
     */
    public function setDefaultDisplayText($default_display_text)
    {
        $this->container['default_display_text'] = $default_display_text;

        return $this;
    }

    /**
     * Gets region_code
     *
     * @return string
     */
    public function getRegionCode()
    {
        return $this->container['region_code'];
    }

    /**
     * Sets region_code
     *
     * @param string $region_code Region for this product
     *
     * @return $this
     */
    public function setRegionCode($region_code)
    {
        $this->container['region_code'] = $region_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


