<?php
/**
 * TransferRecord
 *
 * PHP version 5
 *
 * @category Class
 * @package  Kstmostofa\DingConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ding API
 *
 * Important note: If you are within DingConnect, your API key is displayed above and can be used to access and send top-up from your system via the Ding API.    The Ding API is a Level 0 REST web service.  We have used the <a href=\"http://swagger.io\">swagger</a> standard to describe this service. As a result, we are able to provide this interactive documentation page. For further information, you may view the <a href=\"/api/description\">additional documentation</a>; read our <a href=\"/api/faq\">FAQ</a> or contact partnersupport@ding.com
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kstmostofa\DingConnect\Model;

use \ArrayAccess;
use \Kstmostofa\DingConnect\ObjectSerializer;

/**
 * TransferRecord Class Doc Comment
 *
 * @category Class
 * @package  Kstmostofa\DingConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransferRecord implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransferRecord';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'transfer_id' => '\Kstmostofa\DingConnect\Model\TransferId',
        'sku_code' => 'string',
        'price' => '\Kstmostofa\DingConnect\Model\Price',
        'commission_applied' => 'float',
        'started_utc' => '\DateTime',
        'completed_utc' => '\DateTime',
        'processing_state' => 'string',
        'receipt_text' => 'string',
        'receipt_params' => 'map[string,string]',
        'account_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'transfer_id' => null,
        'sku_code' => null,
        'price' => null,
        'commission_applied' => 'decimal',
        'started_utc' => 'date-time',
        'completed_utc' => 'date-time',
        'processing_state' => null,
        'receipt_text' => null,
        'receipt_params' => null,
        'account_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transfer_id' => 'TransferId',
        'sku_code' => 'SkuCode',
        'price' => 'Price',
        'commission_applied' => 'CommissionApplied',
        'started_utc' => 'StartedUtc',
        'completed_utc' => 'CompletedUtc',
        'processing_state' => 'ProcessingState',
        'receipt_text' => 'ReceiptText',
        'receipt_params' => 'ReceiptParams',
        'account_number' => 'AccountNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transfer_id' => 'setTransferId',
        'sku_code' => 'setSkuCode',
        'price' => 'setPrice',
        'commission_applied' => 'setCommissionApplied',
        'started_utc' => 'setStartedUtc',
        'completed_utc' => 'setCompletedUtc',
        'processing_state' => 'setProcessingState',
        'receipt_text' => 'setReceiptText',
        'receipt_params' => 'setReceiptParams',
        'account_number' => 'setAccountNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transfer_id' => 'getTransferId',
        'sku_code' => 'getSkuCode',
        'price' => 'getPrice',
        'commission_applied' => 'getCommissionApplied',
        'started_utc' => 'getStartedUtc',
        'completed_utc' => 'getCompletedUtc',
        'processing_state' => 'getProcessingState',
        'receipt_text' => 'getReceiptText',
        'receipt_params' => 'getReceiptParams',
        'account_number' => 'getAccountNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transfer_id'] = isset($data['transfer_id']) ? $data['transfer_id'] : null;
        $this->container['sku_code'] = isset($data['sku_code']) ? $data['sku_code'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['commission_applied'] = isset($data['commission_applied']) ? $data['commission_applied'] : null;
        $this->container['started_utc'] = isset($data['started_utc']) ? $data['started_utc'] : null;
        $this->container['completed_utc'] = isset($data['completed_utc']) ? $data['completed_utc'] : null;
        $this->container['processing_state'] = isset($data['processing_state']) ? $data['processing_state'] : null;
        $this->container['receipt_text'] = isset($data['receipt_text']) ? $data['receipt_text'] : null;
        $this->container['receipt_params'] = isset($data['receipt_params']) ? $data['receipt_params'] : null;
        $this->container['account_number'] = isset($data['account_number']) ? $data['account_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku_code'] === null) {
            $invalidProperties[] = "'sku_code' can't be null";
        }
        if ($this->container['commission_applied'] === null) {
            $invalidProperties[] = "'commission_applied' can't be null";
        }
        if ($this->container['processing_state'] === null) {
            $invalidProperties[] = "'processing_state' can't be null";
        }
        if ($this->container['account_number'] === null) {
            $invalidProperties[] = "'account_number' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transfer_id
     *
     * @return \Kstmostofa\DingConnect\Model\TransferId
     */
    public function getTransferId()
    {
        return $this->container['transfer_id'];
    }

    /**
     * Sets transfer_id
     *
     * @param \Kstmostofa\DingConnect\Model\TransferId $transfer_id Both system and customer identifiers for the specific transfer
     *
     * @return $this
     */
    public function setTransferId($transfer_id)
    {
        $this->container['transfer_id'] = $transfer_id;

        return $this;
    }

    /**
     * Gets sku_code
     *
     * @return string
     */
    public function getSkuCode()
    {
        return $this->container['sku_code'];
    }

    /**
     * Sets sku_code
     *
     * @param string $sku_code The unique product SkuCode
     *
     * @return $this
     */
    public function setSkuCode($sku_code)
    {
        $this->container['sku_code'] = $sku_code;

        return $this;
    }

    /**
     * Gets price
     *
     * @return \Kstmostofa\DingConnect\Model\Price
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param \Kstmostofa\DingConnect\Model\Price $price The resulting price of the SendTransfer
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets commission_applied
     *
     * @return float
     */
    public function getCommissionApplied()
    {
        return $this->container['commission_applied'];
    }

    /**
     * Sets commission_applied
     *
     * @param float $commission_applied The actual commision that was earned for selling this transfer
     *
     * @return $this
     */
    public function setCommissionApplied($commission_applied)
    {
        $this->container['commission_applied'] = $commission_applied;

        return $this;
    }

    /**
     * Gets started_utc
     *
     * @return \DateTime
     */
    public function getStartedUtc()
    {
        return $this->container['started_utc'];
    }

    /**
     * Sets started_utc
     *
     * @param \DateTime $started_utc The UTC datetime when processing the transfer was started.
     *
     * @return $this
     */
    public function setStartedUtc($started_utc)
    {
        $this->container['started_utc'] = $started_utc;

        return $this;
    }

    /**
     * Gets completed_utc
     *
     * @return \DateTime
     */
    public function getCompletedUtc()
    {
        return $this->container['completed_utc'];
    }

    /**
     * Sets completed_utc
     *
     * @param \DateTime $completed_utc The UTC datetime that the transfer was recorded as being completed in our system
     *
     * @return $this
     */
    public function setCompletedUtc($completed_utc)
    {
        $this->container['completed_utc'] = $completed_utc;

        return $this;
    }

    /**
     * Gets processing_state
     *
     * @return string
     */
    public function getProcessingState()
    {
        return $this->container['processing_state'];
    }

    /**
     * Sets processing_state
     *
     * @param string $processing_state Will indicate the current state of the transfer as it progresses through our system
     *
     * @return $this
     */
    public function setProcessingState($processing_state)
    {
        $this->container['processing_state'] = $processing_state;

        return $this;
    }

    /**
     * Gets receipt_text
     *
     * @return string
     */
    public function getReceiptText()
    {
        return $this->container['receipt_text'];
    }

    /**
     * Sets receipt_text
     *
     * @param string $receipt_text Provider specific receipt text for the transfer. May contain additional information for the end customer.
     *
     * @return $this
     */
    public function setReceiptText($receipt_text)
    {
        $this->container['receipt_text'] = $receipt_text;

        return $this;
    }

    /**
     * Gets receipt_params
     *
     * @return map[string,string]
     */
    public function getReceiptParams()
    {
        return $this->container['receipt_params'];
    }

    /**
     * Sets receipt_params
     *
     * @param map[string,string] $receipt_params Name value pairs of data that is in the ReceiptText.
     *
     * @return $this
     */
    public function setReceiptParams($receipt_params)
    {
        $this->container['receipt_params'] = $receipt_params;

        return $this;
    }

    /**
     * Gets account_number
     *
     * @return string
     */
    public function getAccountNumber()
    {
        return $this->container['account_number'];
    }

    /**
     * Sets account_number
     *
     * @param string $account_number The account number targeted in the transfer
     *
     * @return $this
     */
    public function setAccountNumber($account_number)
    {
        $this->container['account_number'] = $account_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


