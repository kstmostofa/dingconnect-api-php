<?php
/**
 * V1Api
 * PHP version 5
 *
 * @category Class
 * @package  Kstmostofa\DingConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ding API
 *
 * Important note: If you are within DingConnect, your API key is displayed above and can be used to access and send top-up from your system via the Ding API.    The Ding API is a Level 0 REST web service.  We have used the <a href=\"http://swagger.io\">swagger</a> standard to describe this service. As a result, we are able to provide this interactive documentation page. For further information, you may view the <a href=\"/api/description\">additional documentation</a>; read our <a href=\"/api/faq\">FAQ</a> or contact partnersupport@ding.com
 *
 * OpenAPI spec version: V1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.5
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Kstmostofa\DingConnect\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Kstmostofa\DingConnect\ApiException;
use Kstmostofa\DingConnect\Configuration;
use Kstmostofa\DingConnect\HeaderSelector;
use Kstmostofa\DingConnect\ObjectSerializer;

/**
 * V1Api Class Doc Comment
 *
 * @category Class
 * @package  Kstmostofa\DingConnect
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V1Api
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation cancelTransfers
     *
     * Attempt to cancel transfers with the submitted TransferIds
     *
     * @param  \Kstmostofa\DingConnect\Model\CancellationRequest[] $cancellation_requests An explicit list of records to cancel. (required)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\CancelTransfersResponse
     */
    public function cancelTransfers($cancellation_requests)
    {
        list($response) = $this->cancelTransfersWithHttpInfo($cancellation_requests);
        return $response;
    }

    /**
     * Operation cancelTransfersWithHttpInfo
     *
     * Attempt to cancel transfers with the submitted TransferIds
     *
     * @param  \Kstmostofa\DingConnect\Model\CancellationRequest[] $cancellation_requests An explicit list of records to cancel. (required)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\CancelTransfersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelTransfersWithHttpInfo($cancellation_requests)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\CancelTransfersResponse';
        $request = $this->cancelTransfersRequest($cancellation_requests);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\CancelTransfersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelTransfersAsync
     *
     * Attempt to cancel transfers with the submitted TransferIds
     *
     * @param  \Kstmostofa\DingConnect\Model\CancellationRequest[] $cancellation_requests An explicit list of records to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelTransfersAsync($cancellation_requests)
    {
        return $this->cancelTransfersAsyncWithHttpInfo($cancellation_requests)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelTransfersAsyncWithHttpInfo
     *
     * Attempt to cancel transfers with the submitted TransferIds
     *
     * @param  \Kstmostofa\DingConnect\Model\CancellationRequest[] $cancellation_requests An explicit list of records to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelTransfersAsyncWithHttpInfo($cancellation_requests)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\CancelTransfersResponse';
        $request = $this->cancelTransfersRequest($cancellation_requests);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelTransfers'
     *
     * @param  \Kstmostofa\DingConnect\Model\CancellationRequest[] $cancellation_requests An explicit list of records to cancel. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function cancelTransfersRequest($cancellation_requests)
    {
        // verify the required parameter 'cancellation_requests' is set
        if ($cancellation_requests === null || (is_array($cancellation_requests) && count($cancellation_requests) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $cancellation_requests when calling cancelTransfers'
            );
        }

        $resourcePath = '/api/V1/CancelTransfers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($cancellation_requests)) {
            $_tempBody = $cancellation_requests;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation estimatePrices
     *
     * Estimate prices for send or receive values
     *
     * @param  \Kstmostofa\DingConnect\Model\EstimationRequest[] $requested_estimations requested_estimations (required)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\EstimatePricesResponse
     */
    public function estimatePrices($requested_estimations)
    {
        list($response) = $this->estimatePricesWithHttpInfo($requested_estimations);
        return $response;
    }

    /**
     * Operation estimatePricesWithHttpInfo
     *
     * Estimate prices for send or receive values
     *
     * @param  \Kstmostofa\DingConnect\Model\EstimationRequest[] $requested_estimations (required)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\EstimatePricesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function estimatePricesWithHttpInfo($requested_estimations)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\EstimatePricesResponse';
        $request = $this->estimatePricesRequest($requested_estimations);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\EstimatePricesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation estimatePricesAsync
     *
     * Estimate prices for send or receive values
     *
     * @param  \Kstmostofa\DingConnect\Model\EstimationRequest[] $requested_estimations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimatePricesAsync($requested_estimations)
    {
        return $this->estimatePricesAsyncWithHttpInfo($requested_estimations)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation estimatePricesAsyncWithHttpInfo
     *
     * Estimate prices for send or receive values
     *
     * @param  \Kstmostofa\DingConnect\Model\EstimationRequest[] $requested_estimations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function estimatePricesAsyncWithHttpInfo($requested_estimations)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\EstimatePricesResponse';
        $request = $this->estimatePricesRequest($requested_estimations);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'estimatePrices'
     *
     * @param  \Kstmostofa\DingConnect\Model\EstimationRequest[] $requested_estimations (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function estimatePricesRequest($requested_estimations)
    {
        // verify the required parameter 'requested_estimations' is set
        if ($requested_estimations === null || (is_array($requested_estimations) && count($requested_estimations) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $requested_estimations when calling estimatePrices'
            );
        }

        $resourcePath = '/api/V1/EstimatePrices';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($requested_estimations)) {
            $_tempBody = $requested_estimations;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getAccountLookup
     *
     * Get providers and product information for a specific account number
     *
     * @param  string $account_number For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetAccountLookupResponse
     */
    public function getAccountLookup($account_number = null)
    {
        list($response) = $this->getAccountLookupWithHttpInfo($account_number);
        return $response;
    }

    /**
     * Operation getAccountLookupWithHttpInfo
     *
     * Get providers and product information for a specific account number
     *
     * @param  string $account_number For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetAccountLookupResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getAccountLookupWithHttpInfo($account_number = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetAccountLookupResponse';
        $request = $this->getAccountLookupRequest($account_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetAccountLookupResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getAccountLookupAsync
     *
     * Get providers and product information for a specific account number
     *
     * @param  string $account_number For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountLookupAsync($account_number = null)
    {
        return $this->getAccountLookupAsyncWithHttpInfo($account_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getAccountLookupAsyncWithHttpInfo
     *
     * Get providers and product information for a specific account number
     *
     * @param  string $account_number For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getAccountLookupAsyncWithHttpInfo($account_number = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetAccountLookupResponse';
        $request = $this->getAccountLookupRequest($account_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getAccountLookup'
     *
     * @param  string $account_number For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getAccountLookupRequest($account_number = null)
    {

        $resourcePath = '/api/V1/GetAccountLookup';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($account_number !== null) {
            $queryParams['accountNumber'] = ObjectSerializer::toQueryValue($account_number);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getBalance
     *
     * Get the current agent balance
     *
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetBalanceResponse
     */
    public function getBalance()
    {
        list($response) = $this->getBalanceWithHttpInfo();
        return $response;
    }

    /**
     * Operation getBalanceWithHttpInfo
     *
     * Get the current agent balance
     *
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetBalanceResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getBalanceWithHttpInfo()
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetBalanceResponse';
        $request = $this->getBalanceRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetBalanceResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getBalanceAsync
     *
     * Get the current agent balance
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBalanceAsync()
    {
        return $this->getBalanceAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getBalanceAsyncWithHttpInfo
     *
     * Get the current agent balance
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getBalanceAsyncWithHttpInfo()
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetBalanceResponse';
        $request = $this->getBalanceRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getBalance'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getBalanceRequest()
    {

        $resourcePath = '/api/V1/GetBalance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCountries
     *
     * Get a list of supported countries
     *
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetCountriesResponse
     */
    public function getCountries()
    {
        list($response) = $this->getCountriesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCountriesWithHttpInfo
     *
     * Get a list of supported countries
     *
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetCountriesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCountriesWithHttpInfo()
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetCountriesResponse';
        $request = $this->getCountriesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetCountriesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCountriesAsync
     *
     * Get a list of supported countries
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountriesAsync()
    {
        return $this->getCountriesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCountriesAsyncWithHttpInfo
     *
     * Get a list of supported countries
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCountriesAsyncWithHttpInfo()
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetCountriesResponse';
        $request = $this->getCountriesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCountries'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCountriesRequest()
    {

        $resourcePath = '/api/V1/GetCountries';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCurrencies
     *
     * Get a list of supported currencies
     *
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetCurrenciesResponse
     */
    public function getCurrencies()
    {
        list($response) = $this->getCurrenciesWithHttpInfo();
        return $response;
    }

    /**
     * Operation getCurrenciesWithHttpInfo
     *
     * Get a list of supported currencies
     *
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetCurrenciesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCurrenciesWithHttpInfo()
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetCurrenciesResponse';
        $request = $this->getCurrenciesRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetCurrenciesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCurrenciesAsync
     *
     * Get a list of supported currencies
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrenciesAsync()
    {
        return $this->getCurrenciesAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCurrenciesAsyncWithHttpInfo
     *
     * Get a list of supported currencies
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCurrenciesAsyncWithHttpInfo()
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetCurrenciesResponse';
        $request = $this->getCurrenciesRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCurrencies'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCurrenciesRequest()
    {

        $resourcePath = '/api/V1/GetCurrencies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getErrorCodeDescriptions
     *
     * Get a list of error code descriptions
     *
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetErrorCodeDescriptionsResponse
     */
    public function getErrorCodeDescriptions()
    {
        list($response) = $this->getErrorCodeDescriptionsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getErrorCodeDescriptionsWithHttpInfo
     *
     * Get a list of error code descriptions
     *
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetErrorCodeDescriptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getErrorCodeDescriptionsWithHttpInfo()
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetErrorCodeDescriptionsResponse';
        $request = $this->getErrorCodeDescriptionsRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetErrorCodeDescriptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getErrorCodeDescriptionsAsync
     *
     * Get a list of error code descriptions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getErrorCodeDescriptionsAsync()
    {
        return $this->getErrorCodeDescriptionsAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getErrorCodeDescriptionsAsyncWithHttpInfo
     *
     * Get a list of error code descriptions
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getErrorCodeDescriptionsAsyncWithHttpInfo()
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetErrorCodeDescriptionsResponse';
        $request = $this->getErrorCodeDescriptionsRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getErrorCodeDescriptions'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getErrorCodeDescriptionsRequest()
    {

        $resourcePath = '/api/V1/GetErrorCodeDescriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductDescriptions
     *
     * Get localized strings for products
     *
     * @param  string[] $language_codes Filter the list to product descriptions with the submitted language codes. (optional)
     * @param  string[] $sku_codes Filter the list to descriptions for products with the submitted SkuCodes. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetProductDescriptionsResponse
     */
    public function getProductDescriptions($language_codes = null, $sku_codes = null)
    {
        list($response) = $this->getProductDescriptionsWithHttpInfo($language_codes, $sku_codes);
        return $response;
    }

    /**
     * Operation getProductDescriptionsWithHttpInfo
     *
     * Get localized strings for products
     *
     * @param  string[] $language_codes Filter the list to product descriptions with the submitted language codes. (optional)
     * @param  string[] $sku_codes Filter the list to descriptions for products with the submitted SkuCodes. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetProductDescriptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductDescriptionsWithHttpInfo($language_codes = null, $sku_codes = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetProductDescriptionsResponse';
        $request = $this->getProductDescriptionsRequest($language_codes, $sku_codes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetProductDescriptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductDescriptionsAsync
     *
     * Get localized strings for products
     *
     * @param  string[] $language_codes Filter the list to product descriptions with the submitted language codes. (optional)
     * @param  string[] $sku_codes Filter the list to descriptions for products with the submitted SkuCodes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDescriptionsAsync($language_codes = null, $sku_codes = null)
    {
        return $this->getProductDescriptionsAsyncWithHttpInfo($language_codes, $sku_codes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductDescriptionsAsyncWithHttpInfo
     *
     * Get localized strings for products
     *
     * @param  string[] $language_codes Filter the list to product descriptions with the submitted language codes. (optional)
     * @param  string[] $sku_codes Filter the list to descriptions for products with the submitted SkuCodes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductDescriptionsAsyncWithHttpInfo($language_codes = null, $sku_codes = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetProductDescriptionsResponse';
        $request = $this->getProductDescriptionsRequest($language_codes, $sku_codes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductDescriptions'
     *
     * @param  string[] $language_codes Filter the list to product descriptions with the submitted language codes. (optional)
     * @param  string[] $sku_codes Filter the list to descriptions for products with the submitted SkuCodes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductDescriptionsRequest($language_codes = null, $sku_codes = null)
    {

        $resourcePath = '/api/V1/GetProductDescriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($language_codes)) {
            $language_codes = ObjectSerializer::serializeCollection($language_codes, 'multi', true);
        }
        if ($language_codes !== null) {
            $queryParams['languageCodes'] = ObjectSerializer::toQueryValue($language_codes);
        }
        // query params
        if (is_array($sku_codes)) {
            $sku_codes = ObjectSerializer::serializeCollection($sku_codes, 'multi', true);
        }
        if ($sku_codes !== null) {
            $queryParams['skuCodes'] = ObjectSerializer::toQueryValue($sku_codes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProducts
     *
     * Get a list of products that can be used in SendTransfer
     *
     * @param  string[] $country_isos Filter the list to products for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to products supplied by providers with the submitted provider codes. (optional)
     * @param  string[] $sku_codes Filter the list to products with the submitted SkuCodes. (optional)
     * @param  string[] $benefits Filter the list to products with the listed benefits. (optional)
     * @param  string[] $region_codes Filter the list to products in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetProductsResponse
     */
    public function getProducts($country_isos = null, $provider_codes = null, $sku_codes = null, $benefits = null, $region_codes = null, $account_number = null)
    {
        list($response) = $this->getProductsWithHttpInfo($country_isos, $provider_codes, $sku_codes, $benefits, $region_codes, $account_number);
        return $response;
    }

    /**
     * Operation getProductsWithHttpInfo
     *
     * Get a list of products that can be used in SendTransfer
     *
     * @param  string[] $country_isos Filter the list to products for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to products supplied by providers with the submitted provider codes. (optional)
     * @param  string[] $sku_codes Filter the list to products with the submitted SkuCodes. (optional)
     * @param  string[] $benefits Filter the list to products with the listed benefits. (optional)
     * @param  string[] $region_codes Filter the list to products in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetProductsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductsWithHttpInfo($country_isos = null, $provider_codes = null, $sku_codes = null, $benefits = null, $region_codes = null, $account_number = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetProductsResponse';
        $request = $this->getProductsRequest($country_isos, $provider_codes, $sku_codes, $benefits, $region_codes, $account_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetProductsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductsAsync
     *
     * Get a list of products that can be used in SendTransfer
     *
     * @param  string[] $country_isos Filter the list to products for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to products supplied by providers with the submitted provider codes. (optional)
     * @param  string[] $sku_codes Filter the list to products with the submitted SkuCodes. (optional)
     * @param  string[] $benefits Filter the list to products with the listed benefits. (optional)
     * @param  string[] $region_codes Filter the list to products in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsAsync($country_isos = null, $provider_codes = null, $sku_codes = null, $benefits = null, $region_codes = null, $account_number = null)
    {
        return $this->getProductsAsyncWithHttpInfo($country_isos, $provider_codes, $sku_codes, $benefits, $region_codes, $account_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductsAsyncWithHttpInfo
     *
     * Get a list of products that can be used in SendTransfer
     *
     * @param  string[] $country_isos Filter the list to products for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to products supplied by providers with the submitted provider codes. (optional)
     * @param  string[] $sku_codes Filter the list to products with the submitted SkuCodes. (optional)
     * @param  string[] $benefits Filter the list to products with the listed benefits. (optional)
     * @param  string[] $region_codes Filter the list to products in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductsAsyncWithHttpInfo($country_isos = null, $provider_codes = null, $sku_codes = null, $benefits = null, $region_codes = null, $account_number = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetProductsResponse';
        $request = $this->getProductsRequest($country_isos, $provider_codes, $sku_codes, $benefits, $region_codes, $account_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProducts'
     *
     * @param  string[] $country_isos Filter the list to products for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to products supplied by providers with the submitted provider codes. (optional)
     * @param  string[] $sku_codes Filter the list to products with the submitted SkuCodes. (optional)
     * @param  string[] $benefits Filter the list to products with the listed benefits. (optional)
     * @param  string[] $region_codes Filter the list to products in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductsRequest($country_isos = null, $provider_codes = null, $sku_codes = null, $benefits = null, $region_codes = null, $account_number = null)
    {

        $resourcePath = '/api/V1/GetProducts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($country_isos)) {
            $country_isos = ObjectSerializer::serializeCollection($country_isos, 'multi', true);
        }
        if ($country_isos !== null) {
            $queryParams['countryIsos'] = ObjectSerializer::toQueryValue($country_isos);
        }
        // query params
        if (is_array($provider_codes)) {
            $provider_codes = ObjectSerializer::serializeCollection($provider_codes, 'multi', true);
        }
        if ($provider_codes !== null) {
            $queryParams['providerCodes'] = ObjectSerializer::toQueryValue($provider_codes);
        }
        // query params
        if (is_array($sku_codes)) {
            $sku_codes = ObjectSerializer::serializeCollection($sku_codes, 'multi', true);
        }
        if ($sku_codes !== null) {
            $queryParams['skuCodes'] = ObjectSerializer::toQueryValue($sku_codes);
        }
        // query params
        if (is_array($benefits)) {
            $benefits = ObjectSerializer::serializeCollection($benefits, 'multi', true);
        }
        if ($benefits !== null) {
            $queryParams['benefits'] = ObjectSerializer::toQueryValue($benefits);
        }
        // query params
        if (is_array($region_codes)) {
            $region_codes = ObjectSerializer::serializeCollection($region_codes, 'multi', true);
        }
        if ($region_codes !== null) {
            $queryParams['regionCodes'] = ObjectSerializer::toQueryValue($region_codes);
        }
        // query params
        if ($account_number !== null) {
            $queryParams['accountNumber'] = ObjectSerializer::toQueryValue($account_number);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPromotionDescriptions
     *
     * Get localized strings for promotions
     *
     * @param  string[] $language_codes Filter the list to promotion descriptions with the submitted language codes. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetPromotionDescriptionsResponse
     */
    public function getPromotionDescriptions($language_codes = null)
    {
        list($response) = $this->getPromotionDescriptionsWithHttpInfo($language_codes);
        return $response;
    }

    /**
     * Operation getPromotionDescriptionsWithHttpInfo
     *
     * Get localized strings for promotions
     *
     * @param  string[] $language_codes Filter the list to promotion descriptions with the submitted language codes. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetPromotionDescriptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPromotionDescriptionsWithHttpInfo($language_codes = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetPromotionDescriptionsResponse';
        $request = $this->getPromotionDescriptionsRequest($language_codes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetPromotionDescriptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPromotionDescriptionsAsync
     *
     * Get localized strings for promotions
     *
     * @param  string[] $language_codes Filter the list to promotion descriptions with the submitted language codes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromotionDescriptionsAsync($language_codes = null)
    {
        return $this->getPromotionDescriptionsAsyncWithHttpInfo($language_codes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPromotionDescriptionsAsyncWithHttpInfo
     *
     * Get localized strings for promotions
     *
     * @param  string[] $language_codes Filter the list to promotion descriptions with the submitted language codes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromotionDescriptionsAsyncWithHttpInfo($language_codes = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetPromotionDescriptionsResponse';
        $request = $this->getPromotionDescriptionsRequest($language_codes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPromotionDescriptions'
     *
     * @param  string[] $language_codes Filter the list to promotion descriptions with the submitted language codes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPromotionDescriptionsRequest($language_codes = null)
    {

        $resourcePath = '/api/V1/GetPromotionDescriptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($language_codes)) {
            $language_codes = ObjectSerializer::serializeCollection($language_codes, 'multi', true);
        }
        if ($language_codes !== null) {
            $queryParams['languageCodes'] = ObjectSerializer::toQueryValue($language_codes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPromotions
     *
     * Get a list of promotions
     *
     * @param  string[] $country_isos Filter the list to promotions for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to promotions on products supplied by providers with the submitted provider codes. (optional)
     * @param  string $account_number Filter the list to promotions on products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetPromotionsResponse
     */
    public function getPromotions($country_isos = null, $provider_codes = null, $account_number = null)
    {
        list($response) = $this->getPromotionsWithHttpInfo($country_isos, $provider_codes, $account_number);
        return $response;
    }

    /**
     * Operation getPromotionsWithHttpInfo
     *
     * Get a list of promotions
     *
     * @param  string[] $country_isos Filter the list to promotions for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to promotions on products supplied by providers with the submitted provider codes. (optional)
     * @param  string $account_number Filter the list to promotions on products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetPromotionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPromotionsWithHttpInfo($country_isos = null, $provider_codes = null, $account_number = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetPromotionsResponse';
        $request = $this->getPromotionsRequest($country_isos, $provider_codes, $account_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetPromotionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPromotionsAsync
     *
     * Get a list of promotions
     *
     * @param  string[] $country_isos Filter the list to promotions for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to promotions on products supplied by providers with the submitted provider codes. (optional)
     * @param  string $account_number Filter the list to promotions on products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromotionsAsync($country_isos = null, $provider_codes = null, $account_number = null)
    {
        return $this->getPromotionsAsyncWithHttpInfo($country_isos, $provider_codes, $account_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPromotionsAsyncWithHttpInfo
     *
     * Get a list of promotions
     *
     * @param  string[] $country_isos Filter the list to promotions for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to promotions on products supplied by providers with the submitted provider codes. (optional)
     * @param  string $account_number Filter the list to promotions on products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPromotionsAsyncWithHttpInfo($country_isos = null, $provider_codes = null, $account_number = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetPromotionsResponse';
        $request = $this->getPromotionsRequest($country_isos, $provider_codes, $account_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPromotions'
     *
     * @param  string[] $country_isos Filter the list to promotions for countries with the given ISOs. (optional)
     * @param  string[] $provider_codes Filter the list to promotions on products supplied by providers with the submitted provider codes. (optional)
     * @param  string $account_number Filter the list to promotions on products that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPromotionsRequest($country_isos = null, $provider_codes = null, $account_number = null)
    {

        $resourcePath = '/api/V1/GetPromotions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($country_isos)) {
            $country_isos = ObjectSerializer::serializeCollection($country_isos, 'multi', true);
        }
        if ($country_isos !== null) {
            $queryParams['countryIsos'] = ObjectSerializer::toQueryValue($country_isos);
        }
        // query params
        if (is_array($provider_codes)) {
            $provider_codes = ObjectSerializer::serializeCollection($provider_codes, 'multi', true);
        }
        if ($provider_codes !== null) {
            $queryParams['providerCodes'] = ObjectSerializer::toQueryValue($provider_codes);
        }
        // query params
        if ($account_number !== null) {
            $queryParams['accountNumber'] = ObjectSerializer::toQueryValue($account_number);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProviderStatus
     *
     * Get the current status of product providers
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetProviderStatusResponse
     */
    public function getProviderStatus($provider_codes = null)
    {
        list($response) = $this->getProviderStatusWithHttpInfo($provider_codes);
        return $response;
    }

    /**
     * Operation getProviderStatusWithHttpInfo
     *
     * Get the current status of product providers
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetProviderStatusResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProviderStatusWithHttpInfo($provider_codes = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetProviderStatusResponse';
        $request = $this->getProviderStatusRequest($provider_codes);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetProviderStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProviderStatusAsync
     *
     * Get the current status of product providers
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProviderStatusAsync($provider_codes = null)
    {
        return $this->getProviderStatusAsyncWithHttpInfo($provider_codes)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProviderStatusAsyncWithHttpInfo
     *
     * Get the current status of product providers
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProviderStatusAsyncWithHttpInfo($provider_codes = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetProviderStatusResponse';
        $request = $this->getProviderStatusRequest($provider_codes);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProviderStatus'
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProviderStatusRequest($provider_codes = null)
    {

        $resourcePath = '/api/V1/GetProviderStatus';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($provider_codes)) {
            $provider_codes = ObjectSerializer::serializeCollection($provider_codes, 'multi', true);
        }
        if ($provider_codes !== null) {
            $queryParams['providerCodes'] = ObjectSerializer::toQueryValue($provider_codes);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProviders
     *
     * Get a list of product providers available to the agent
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     * @param  string[] $country_isos Filter the list to providers in countries with the submitted countryIso. (optional)
     * @param  string[] $region_codes Filter the list to providers in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to providers that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetProvidersResponse
     */
    public function getProviders($provider_codes = null, $country_isos = null, $region_codes = null, $account_number = null)
    {
        list($response) = $this->getProvidersWithHttpInfo($provider_codes, $country_isos, $region_codes, $account_number);
        return $response;
    }

    /**
     * Operation getProvidersWithHttpInfo
     *
     * Get a list of product providers available to the agent
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     * @param  string[] $country_isos Filter the list to providers in countries with the submitted countryIso. (optional)
     * @param  string[] $region_codes Filter the list to providers in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to providers that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetProvidersResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProvidersWithHttpInfo($provider_codes = null, $country_isos = null, $region_codes = null, $account_number = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetProvidersResponse';
        $request = $this->getProvidersRequest($provider_codes, $country_isos, $region_codes, $account_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetProvidersResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProvidersAsync
     *
     * Get a list of product providers available to the agent
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     * @param  string[] $country_isos Filter the list to providers in countries with the submitted countryIso. (optional)
     * @param  string[] $region_codes Filter the list to providers in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to providers that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProvidersAsync($provider_codes = null, $country_isos = null, $region_codes = null, $account_number = null)
    {
        return $this->getProvidersAsyncWithHttpInfo($provider_codes, $country_isos, $region_codes, $account_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProvidersAsyncWithHttpInfo
     *
     * Get a list of product providers available to the agent
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     * @param  string[] $country_isos Filter the list to providers in countries with the submitted countryIso. (optional)
     * @param  string[] $region_codes Filter the list to providers in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to providers that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProvidersAsyncWithHttpInfo($provider_codes = null, $country_isos = null, $region_codes = null, $account_number = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetProvidersResponse';
        $request = $this->getProvidersRequest($provider_codes, $country_isos, $region_codes, $account_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProviders'
     *
     * @param  string[] $provider_codes Filter the list to providers with the submitted provider codes. (optional)
     * @param  string[] $country_isos Filter the list to providers in countries with the submitted countryIso. (optional)
     * @param  string[] $region_codes Filter the list to providers in regions with the submitted regionCodes. (optional)
     * @param  string $account_number Filter the list to providers that are valid for the submitted account number. For phone number based products, the account number should be in international phone number format. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProvidersRequest($provider_codes = null, $country_isos = null, $region_codes = null, $account_number = null)
    {

        $resourcePath = '/api/V1/GetProviders';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($provider_codes)) {
            $provider_codes = ObjectSerializer::serializeCollection($provider_codes, 'multi', true);
        }
        if ($provider_codes !== null) {
            $queryParams['providerCodes'] = ObjectSerializer::toQueryValue($provider_codes);
        }
        // query params
        if (is_array($country_isos)) {
            $country_isos = ObjectSerializer::serializeCollection($country_isos, 'multi', true);
        }
        if ($country_isos !== null) {
            $queryParams['countryIsos'] = ObjectSerializer::toQueryValue($country_isos);
        }
        // query params
        if (is_array($region_codes)) {
            $region_codes = ObjectSerializer::serializeCollection($region_codes, 'multi', true);
        }
        if ($region_codes !== null) {
            $queryParams['regionCodes'] = ObjectSerializer::toQueryValue($region_codes);
        }
        // query params
        if ($account_number !== null) {
            $queryParams['accountNumber'] = ObjectSerializer::toQueryValue($account_number);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getRegions
     *
     * Get a list of regions on the system
     *
     * @param  string[] $country_isos Filter the list to regions in countries with the submitted countryIso. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\GetRegionsResponse
     */
    public function getRegions($country_isos = null)
    {
        list($response) = $this->getRegionsWithHttpInfo($country_isos);
        return $response;
    }

    /**
     * Operation getRegionsWithHttpInfo
     *
     * Get a list of regions on the system
     *
     * @param  string[] $country_isos Filter the list to regions in countries with the submitted countryIso. (optional)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\GetRegionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getRegionsWithHttpInfo($country_isos = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetRegionsResponse';
        $request = $this->getRegionsRequest($country_isos);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\GetRegionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getRegionsAsync
     *
     * Get a list of regions on the system
     *
     * @param  string[] $country_isos Filter the list to regions in countries with the submitted countryIso. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRegionsAsync($country_isos = null)
    {
        return $this->getRegionsAsyncWithHttpInfo($country_isos)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getRegionsAsyncWithHttpInfo
     *
     * Get a list of regions on the system
     *
     * @param  string[] $country_isos Filter the list to regions in countries with the submitted countryIso. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getRegionsAsyncWithHttpInfo($country_isos = null)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\GetRegionsResponse';
        $request = $this->getRegionsRequest($country_isos);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getRegions'
     *
     * @param  string[] $country_isos Filter the list to regions in countries with the submitted countryIso. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getRegionsRequest($country_isos = null)
    {

        $resourcePath = '/api/V1/GetRegions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($country_isos)) {
            $country_isos = ObjectSerializer::serializeCollection($country_isos, 'multi', true);
        }
        if ($country_isos !== null) {
            $queryParams['countryIsos'] = ObjectSerializer::toQueryValue($country_isos);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listTransferRecords
     *
     * Query transfers that were submitted to the system
     *
     * @param  \Kstmostofa\DingConnect\Model\ListTransferRecordsRequest $request request (required)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\ListTransferRecordsResponse
     */
    public function listTransferRecords($request)
    {
        list($response) = $this->listTransferRecordsWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation listTransferRecordsWithHttpInfo
     *
     * Query transfers that were submitted to the system
     *
     * @param  \Kstmostofa\DingConnect\Model\ListTransferRecordsRequest $request (required)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\ListTransferRecordsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function listTransferRecordsWithHttpInfo($request)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\ListTransferRecordsResponse';
        $request = $this->listTransferRecordsRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\ListTransferRecordsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listTransferRecordsAsync
     *
     * Query transfers that were submitted to the system
     *
     * @param  \Kstmostofa\DingConnect\Model\ListTransferRecordsRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransferRecordsAsync($request)
    {
        return $this->listTransferRecordsAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listTransferRecordsAsyncWithHttpInfo
     *
     * Query transfers that were submitted to the system
     *
     * @param  \Kstmostofa\DingConnect\Model\ListTransferRecordsRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listTransferRecordsAsyncWithHttpInfo($request)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\ListTransferRecordsResponse';
        $request = $this->listTransferRecordsRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listTransferRecords'
     *
     * @param  \Kstmostofa\DingConnect\Model\ListTransferRecordsRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listTransferRecordsRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling listTransferRecords'
            );
        }

        $resourcePath = '/api/V1/ListTransferRecords';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendTransfer
     *
     * Send a transfer to an account
     *
     * @param  \Kstmostofa\DingConnect\Model\SendTransferRequest $request request (required)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Kstmostofa\DingConnect\Model\SendTransferResponse
     */
    public function sendTransfer($request)
    {
        list($response) = $this->sendTransferWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation sendTransferWithHttpInfo
     *
     * Send a transfer to an account
     *
     * @param  \Kstmostofa\DingConnect\Model\SendTransferRequest $request (required)
     *
     * @throws \Kstmostofa\DingConnect\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Kstmostofa\DingConnect\Model\SendTransferResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendTransferWithHttpInfo($request)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\SendTransferResponse';
        $request = $this->sendTransferRequest($request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\SendTransferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\SendTransferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\IApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\SendTransferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Kstmostofa\DingConnect\Model\SendTransferResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendTransferAsync
     *
     * Send a transfer to an account
     *
     * @param  \Kstmostofa\DingConnect\Model\SendTransferRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendTransferAsync($request)
    {
        return $this->sendTransferAsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendTransferAsyncWithHttpInfo
     *
     * Send a transfer to an account
     *
     * @param  \Kstmostofa\DingConnect\Model\SendTransferRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendTransferAsyncWithHttpInfo($request)
    {
        $returnType = '\Kstmostofa\DingConnect\Model\SendTransferResponse';
        $request = $this->sendTransferRequest($request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendTransfer'
     *
     * @param  \Kstmostofa\DingConnect\Model\SendTransferRequest $request (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sendTransferRequest($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling sendTransfer'
            );
        }

        $resourcePath = '/api/V1/SendTransfer';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
